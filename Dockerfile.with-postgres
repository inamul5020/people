FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app
COPY package.json package-lock.json* ./
RUN npm ci

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# Create public directory if it doesn't exist
RUN mkdir -p public
RUN npm run build

# Production image with PostgreSQL included
FROM alpine:latest AS runner
WORKDIR /app

# Install PostgreSQL, Node.js, and dependencies
RUN apk add --no-cache \
    postgresql \
    postgresql-client \
    nodejs \
    npm \
    libc6-compat \
    python3 \
    make \
    g++ \
    postgresql-libs \
    su-exec \
    bash

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PGDATA=/var/lib/postgresql/data
ENV POSTGRES_USER=postgres
ENV POSTGRES_PASSWORD=postgres
ENV POSTGRES_DB=demographic_db
ENV DATABASE_URL=postgresql://postgres:postgres@localhost:5432/demographic_db

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
RUN adduser --system --uid 999 postgres || true

# Copy public directory (create empty if it doesn't exist)
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir -p .next
RUN chown nextjs:nodejs .next

# Copy standalone output (includes most dependencies but not native modules)
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Copy native modules that standalone doesn't include properly
# Create node_modules directory first
RUN mkdir -p node_modules

# bcrypt needs native bindings (Alpine musl compatible)
COPY --from=deps --chown=nextjs:nodejs /app/node_modules/bcrypt ./node_modules/bcrypt
# pg needs native bindings
COPY --from=deps --chown=nextjs:nodejs /app/node_modules/pg ./node_modules/pg
# Copy pg dependencies
COPY --from=deps --chown=nextjs:nodejs /app/node_modules/pg-types ./node_modules/pg-types
COPY --from=deps --chown=nextjs:nodejs /app/node_modules/pg-protocol ./node_modules/pg-protocol
COPY --from=deps --chown=nextjs:nodejs /app/node_modules/pg-connection-string ./node_modules/pg-connection-string

# Copy database files
COPY --from=builder /app/database ./database

# Copy scripts (ensure directory structure exists in builder first)
# Scripts are needed for admin user setup
COPY --from=builder --chown=nextjs:nodejs /app/scripts ./scripts

# Copy startup script
COPY docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# Expose port
EXPOSE 3000

# Use entrypoint script that starts both PostgreSQL and Next.js
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["node", "server.js"]

